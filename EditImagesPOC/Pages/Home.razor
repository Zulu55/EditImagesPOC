@page "/"

<PageTitle>Edit Images POC</PageTitle>
<h1>Edit Images POC</h1>

<div>
    <canvas id="imageCanvas" width="400" height="300"
    style="border:1px solid #ccc; cursor: crosshair;"
    @onclick="OnCanvasClick"></canvas>
</div>

<br />

<button class="btn btn-primary mt-2" @onclick="ShowInput">Add Text</button>

@if (ShowTextInput)
{
    <div style="margin-top: 10px;">
        <input @bind="InputText" placeholder="Enter text..." />
        <button class="btn btn-success" @onclick="AddText">OK</button>
        <button class="btn btn-danger" @onclick="Cancel">Cancel</button>
    </div>
}

@code {
    private bool ShowTextInput = false;
    private string InputText = string.Empty;
    private double ClickX;
    private double ClickY;
    private bool AwaitingTextPosition = false;

    [Inject] IJSRuntime JS { get; set; } = null!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("drawImageOnCanvas", "images/truck.jpg");
        }
    }

    private void ShowInput()
    {
        AwaitingTextPosition = true;
        ShowTextInput = false;
        InputText = string.Empty;
    }

    private void OnCanvasClick(MouseEventArgs e)
    {
        if (AwaitingTextPosition)
        {
            ClickX = e.OffsetX;
            ClickY = e.OffsetY;
            ShowTextInput = true;
            AwaitingTextPosition = false;
            StateHasChanged();
        }
    }

    private async Task AddText()
    {
        await JS.InvokeVoidAsync("drawTextOnCanvas", InputText, ClickX, ClickY);
        ShowTextInput = false;
        InputText = string.Empty;
    }

    private void Cancel()
    {
        ShowTextInput = false;
        InputText = string.Empty;
    }

}
